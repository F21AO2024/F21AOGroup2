{
  "stats": {
    "suites": 1,
    "tests": 5,
    "passes": 3,
    "pending": 0,
    "failures": 2,
    "start": "2024-03-01T19:28:58.769Z",
    "end": "2024-03-01T19:29:00.070Z",
    "duration": 1301,
    "testsRegistered": 5,
    "passPercent": 60,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "89782ad2-bbad-4e8b-a36a-7016ce50dcb2",
      "title": "",
      "fullFile": "/Users/Katie/Documents/F21AO/F21AOGroup2/services/patient-reg-tests/test.js",
      "file": "/test.js",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 1093,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "//pass type for role\nconst clerk = await registerEmployee('Clerk');\nconst doctor = await registerEmployee('Doctor');\nconst nurse = await registerEmployee('Nurse');\nconst paramedic = await registerEmployee('Paramedic');\nclerk_token = await loginGetToken(clerk.username, clerk.password);\ndoctor_token = await loginGetToken(doctor.username, doctor.password);\nnurse_token = await loginGetToken(nurse.username, nurse.password);\nparamedic_token = await loginGetToken(paramedic.username, paramedic.password);\n// console.log(employee.username);\n// console.log(employee.password);\n// console.log(employee_token);\n// console.log(employee.role)",
          "err": {},
          "uuid": "00994aa6-3c00-4842-9a82-8d9c0a29ebb6",
          "parentUUID": "89782ad2-bbad-4e8b-a36a-7016ce50dcb2",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1043a63e-431e-451a-b88f-452c1ca0922e",
          "title": "Employee Patient Registration API",
          "fullFile": "/Users/Katie/Documents/F21AO/F21AOGroup2/services/patient-reg-tests/test.js",
          "file": "/test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Return 201, patient register success as clerk",
              "fullTitle": "Employee Patient Registration API Return 201, patient register success as clerk",
              "timedOut": false,
              "duration": 62,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(patient_reg_url)\n    .post('')\n    .set('Authorization', clerk_token)\n    .send(generatePatientData())\n    .end(function(err, res) {\n        expect(err).to.be.null;\n        expect(res).to.have.status(201);\n        expect(res.body).to.be.an('object');\n        done();\n    });",
              "err": {},
              "uuid": "65b92113-9b5a-4c80-b820-87fb6dd63b75",
              "parentUUID": "1043a63e-431e-451a-b88f-452c1ca0922e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Return 409, patient already exists",
              "fullTitle": "Employee Patient Registration API Return 409, patient already exists",
              "timedOut": false,
              "duration": 70,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "chai.request(patient_reg_url)\n    .post('')\n    .set('Authorization', clerk_token)\n    .send(generatePatientData())\n    .end(function(err, res) {\n        expect(err).to.be.null;\n        expect(res).to.have.status(409);\n        expect(res.body).to.be.an('object');\n        done();\n    });",
              "err": {
                "message": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 409 but got 201",
                "estack": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 409 but got 201\n    at /Users/Katie/Documents/F21AO/F21AOGroup2/services/patient-reg-tests/test.js:198:37\n    at Request.callback (node_modules/superagent/lib/node/index.js:716:12)\n    at /Users/Katie/Documents/F21AO/F21AOGroup2/services/patient-reg-tests/node_modules/superagent/lib/node/index.js:916:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:19:7)\n    at IncomingMessage.emit (node:events:530:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": "- 201\n+ 409\n"
              },
              "uuid": "bbf1ec15-51d7-4528-adc6-479f5c07dd90",
              "parentUUID": "1043a63e-431e-451a-b88f-452c1ca0922e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Return 403, not allowed to access",
              "fullTitle": "Employee Patient Registration API Return 403, not allowed to access",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(patient_reg_url)\n    .post('')\n    .set('Authorization', doctor_token)\n    .send(generatePatientData())\n    .end(function(err, res) {\n        expect(err).to.be.null;\n        expect(res).to.have.status(403);\n        expect(res.body).to.be.an('object');\n        done();\n    });",
              "err": {},
              "uuid": "03c0d140-3309-4ff9-acf2-5f791de513e2",
              "parentUUID": "1043a63e-431e-451a-b88f-452c1ca0922e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Return 401, invalid/expired/tampered token",
              "fullTitle": "Employee Patient Registration API Return 401, invalid/expired/tampered token",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(patient_reg_url)\n    .post('')\n    .set('Authorization', clerk_token + 'a')\n    .send(generatePatientData())\n    .end(function(err, res) {\n        expect(err).to.be.null;\n        expect(res).to.have.status(401);\n        expect(res.body).to.be.an('object');\n        done();\n    });",
              "err": {},
              "uuid": "dcb393aa-7294-4f13-a3f2-271bd6359645",
              "parentUUID": "1043a63e-431e-451a-b88f-452c1ca0922e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Return 401, no token provided",
              "fullTitle": "Employee Patient Registration API Return 401, no token provided",
              "timedOut": false,
              "duration": 14,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "chai.request(patient_reg_url)\n    .post('')\n    .set('Authorization', ' ')\n    .send(generatePatientData())\n    .end(function(err, res) {\n        expect(err).to.be.null;\n        expect(res).to.have.status(401);\n        expect(res.body).to.be.an('object');\n        done();\n    });",
              "err": {
                "message": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 401 but got 403",
                "estack": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 401 but got 403\n    at /Users/Katie/Documents/F21AO/F21AOGroup2/services/patient-reg-tests/test.js:239:37\n    at Request.callback (node_modules/superagent/lib/node/index.js:716:12)\n    at /Users/Katie/Documents/F21AO/F21AOGroup2/services/patient-reg-tests/node_modules/superagent/lib/node/index.js:916:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:19:7)\n    at IncomingMessage.emit (node:events:530:35)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": "- 403\n+ 401\n"
              },
              "uuid": "faf5a1a4-0c87-44f7-b79f-730a766e7b10",
              "parentUUID": "1043a63e-431e-451a-b88f-452c1ca0922e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "65b92113-9b5a-4c80-b820-87fb6dd63b75",
            "03c0d140-3309-4ff9-acf2-5f791de513e2",
            "dcb393aa-7294-4f13-a3f2-271bd6359645"
          ],
          "failures": [
            "bbf1ec15-51d7-4528-adc6-479f5c07dd90",
            "faf5a1a4-0c87-44f7-b79f-730a766e7b10"
          ],
          "pending": [],
          "skipped": [],
          "duration": 184,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.3.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}